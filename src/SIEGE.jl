module SIEGE

export main

using Pkg
using PackageCompiler
using TOML

function main( path = pwd(), precompile = false )

	# Set paths
	parent_directory = path
	@info("Working in:",parent_directory)
	project_directory = joinpath(parent_directory, "env")
	build_directory = joinpath(parent_directory, "build")

	my_depot = joinpath(build_directory, "depot")
	my_sysimage = joinpath(build_directory, "sysimage.so")

	if isdir(my_depot)
		@info("Depot already exists; using existing depot", my_depot)
	end

	# Set up new environment
	new_environment = copy(ENV)
	delete!(new_environment, "JULIA_LOAD_PATH");
	new_environment["JULIA_DEPOT_PATH"] = my_depot
	new_environment["JULIA_PROJECT"] = project_directory

	run(setenv(`$(Base.julia_cmd()) -e "import Pkg; Pkg.instantiate(); Pkg.precompile()"`, new_environment))

	# Get all packages from Project.toml
	package_list = [ x for x in keys(TOML.parsefile(joinpath(project_directory, "Project.toml"))["deps"]) ]

	if (precompile)
		# Generate precompile file from package tests
		# Note: this greatly increases compile time in order to improve load time
		precompile_file = joinpath(build_directory, "precompile.jl")
		file_handle = open(precompile_file, "w")
		println(file_handle, "# Generated by SIEGE.jl")
		println(file_handle)
		for package in package_list
			println(file_handle, "import $package")
		end
		println(file_handle)
		#for package in package_list
		#	println(file_handle, "include(joinpath(pkgdir($package), \"test\", \"runtests.jl\"))")
		#end
		close(file_handle)

		# Create sysimage 
		create_sysimage(package_list;
			sysimage_path = my_sysimage,
			project = project_directory,
			incremental = true,
			filter_stdlibs = false,
			include_transitive_dependencies = true,
			precompile_execution_file = precompile_file,
		)
	else
		# Create sysimage 
		create_sysimage(package_list;
			sysimage_path = my_sysimage,
			project = project_directory,
			incremental = true,
			filter_stdlibs = false,
			include_transitive_dependencies = true,
		)
	end

	# Delete local files from build depot
	rm(joinpath(my_depot, "compiled"), recursive = true, force = true)
	rm(joinpath(my_depot, "logs"), recursive = true, force = true)

	return
end

end # module SIEGE
